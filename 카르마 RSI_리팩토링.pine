//@version=6
indicator("카르마RSI 리팩토링", overlay=true, max_bars_back = 500)

// 채널 설정
channelSettings = "Channel 설정"
int   length        = input.int(120, "채널 길이", group=channelSettings)
float channel_width = input.float(1.5, "채널 폭", step=0.1, group=channelSettings)

// RSI 설정
rsiSettings = "RSI Settings"
int   rsiLength        = input.int(14, "RSI 선 길이", group=rsiSettings)
int   signalLineLength = input.int(14, "시그널 선 길이", group=rsiSettings)

// 채널 스타일
channelStyle = "Channel 스타일"
bool  showUpperLine   = input.bool(true, "상단선", inline="upper", group=channelStyle)
color upperLineColor  = input.color(#a7abb9, "", inline="upper", group=channelStyle)

bool  showMidLine     = input.bool(true, "중앙선", inline="mid", group=channelStyle)
color midLineColor    = input.color(color.gray, "", inline="mid", group=channelStyle)

bool  showLowLine     = input.bool(true, "하단선", inline="low", group=channelStyle)
color lowLineColor    = input.color(color.gray, "", inline="low", group=channelStyle)

bool  fillChannelBand  = input.bool(true, "백그라운드", inline="fill", group=channelStyle)
color channelBandColor = input.color(color.olive, "", inline="fill", group=channelStyle)

// RSI 스타일
rsiStyle = "RSI 스타일"
bool  showRsiLine   = input.bool(true, "RSI 선", inline="rsi", group=rsiStyle)
color rsiLineColor  = input.color(color.purple, "", inline="rsi", group=rsiStyle)
int   rsiLineWidth  = input.int(3, "", minval=1, maxval=5, inline="rsi", group=rsiStyle)

bool  showSignalLine   = input.bool(true, "시그널 선", inline="sig", group=rsiStyle)
color signalLineColor  = input.color(color.rgb(255, 0, 0), "", inline="sig", group=rsiStyle)
int   signalLineWidth  = input.int(2, "", minval=1, maxval=5, inline="sig", group=rsiStyle)

// 라벨 설정
labelStyle = "라벨 설정"
bool showRsiThresholdLabels      = input.bool(true, "RSI 라벨 표시", group=labelStyle)
bool showRsiUpperThresholdLabels = showRsiThresholdLabels and showUpperLine
bool showRsiLowerThresholdLabels = showRsiThresholdLabels and showLowLine

//──────────────────────────────────────────────────────────────────
// 채널 계산
//──────────────────────────────────────────────────────────────────

f_log_regression(src, len) =>
    float sumX = 0.0, sumY = 0.0, sumXSqr = 0.0, sumXY = 0.0
    for i = 0 to len - 1
        float per = i + 1.0
        float val = math.log(src[i])
        sumX += per
        sumY += val
        sumXSqr += per * per
        sumXY += val * per
    float slope = (len * sumXY - sumX * sumY) / (len * sumXSqr - sumX * sumX)
    float intercept = (sumY - slope * sumX) / len
    [slope, intercept]

[slope, intercept] = f_log_regression(close, length)
reg_start = math.exp(intercept + slope * length)
reg_end   = math.exp(intercept)
dev       = ta.stdev(close, length)
upper_start = reg_start + dev * channel_width
upper_end   = reg_end   + dev * channel_width
lower_start = reg_start - dev * channel_width
lower_end   = reg_end   - dev * channel_width

var line mid_line   = na
var line upper_line = na
var line lower_line = na

if na(mid_line)
    mid_line := line.new(bar_index[length], reg_start, bar_index, reg_end,
                         color = showMidLine ? midLineColor : na, style = line.style_dashed)
else
    line.set_xy1(mid_line, bar_index[length], reg_start)
    line.set_xy2(mid_line, bar_index, reg_end)

if na(upper_line)
    upper_line := line.new(bar_index[length], upper_start, bar_index, upper_end,
                           width = 2, color = showUpperLine ? upperLineColor : na)
else
    line.set_xy1(upper_line, bar_index[length], upper_start)
    line.set_xy2(upper_line, bar_index, upper_end)

if na(lower_line)
    lower_line := line.new(bar_index[length], lower_start, bar_index, lower_end,
                           width = 2, color = showLowLine ? lowLineColor : na)
else
    line.set_xy1(lower_line, bar_index[length], lower_start)
    line.set_xy2(lower_line, bar_index, lower_end)

// 배경 채움
if fillChannelBand
    linefill.new(upper_line, lower_line, channelBandColor)

//──────────────────────────────────────────────────────────────────
// RSI 계산 및 시각화
//──────────────────────────────────────────────────────────────────

rsiUpper = 70
rsiLower = 30
slope_   = (reg_start - reg_end) / length
step     = (upper_end - lower_end) / (rsiUpper - rsiLower)

rsi      = ta.rsi(close, rsiLength)
sma_osc  = ta.sma(rsi, signalLineLength)

polyline_disp(float src, bool display, bool shadow = true, color_ = color.white, width = 1) =>
    if barstate.islast and display
        points = array.new<chart.point>()
        for i = 0 to length - 1
            val   = src[i] - rsiLower
            lower = lower_end + slope_ * i
            cp    = chart.point.from_index(bar_index[i], lower + step * val)
            array.push(points, cp)
        p1 = polyline.new(points, line_color = color_, closed = false,
                          force_overlay = true, line_width = width)
        polyline.delete(p1[1])
        if shadow
            label.delete(label.new(bar_index, lower_end + step * (src - rsiLower),
                                   "카르마 RSI: " + str.tostring(src, "#.##"),
                                   style = label.style_label_left, color = color.new(color.black, 100), textcolor = chart.fg_color)[1])
            if showRsiUpperThresholdLabels
                label.delete(label.new(bar_index, upper_end, str.tostring(rsiUpper, " ##.#"),
                                       style = label.style_label_left, color = color.new(color.black, 100), textcolor = chart.fg_color)[1])
            if showRsiLowerThresholdLabels
                label.delete(label.new(bar_index, lower_end, str.tostring(rsiLower, " ##.#"),
                                       style = label.style_label_left, color = color.new(color.black, 100), textcolor = chart.fg_color)[1])

polyline_disp(rsi, showRsiLine,   true,  rsiLineColor,    rsiLineWidth)
polyline_disp(sma_osc, showSignalLine, false, signalLineColor, signalLineWidth)
