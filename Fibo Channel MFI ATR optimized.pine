//@version=6
indicator("Fibo Channel", overlay=true, max_lines_count=200, max_labels_count=200)

// ── Inputs
regLen        = input.int(200, "Log Regression Length", minval=2)
mfiLen        = input.int(14,  "MFI Length")
atrLen        = input.int(14,  "ATR Length")
anchorLook    = input.int(250, "Anchor Lookback")
widthMult     = input.float(3.0, "Log Width Multiplier", step=0.1)
showMid       = input.bool(true, "Show Mid (50%)")
rightSpan     = input.int(50, "Right Span (% of regLen)", minval=0, maxval=200, tooltip="우측으로 그릴 길이: regLen의 %")
labelPadBars  = input.int(1, "Label Left Padding (bars)", minval=0)
colUp = input.color(#21dfac, "Up Color")
colDn = input.color(#df21dd, "Down Color")

// 채움 색
fill0382Color = input.color(color.new(color.rgb(220, 66, 66),  75), "Fill 0.382–0.5",  group="Style")
fill0618Color = input.color(color.new(color.rgb( 36,162,196), 75), "Fill 0.5–0.618", group="Style")

// ── Utils
f_log_regression(src, len) =>
    float sumX = 0.0, sumY = 0.0, sumXSqr = 0.0, sumXY = 0.0
    for i = 0 to len - 1
        float per = i + 1.0
        float val = math.log(src[i])
        sumX   += per
        sumY   += val
        sumXSqr += per * per
        sumXY  += val * per
    float slope = (len * sumXY - sumX * sumY) / (len * sumXSqr - sumX * sumX)
    float intercept = (sumY - slope * sumX) / len
    [slope, intercept]

f_reg_points(len) =>
    [sl, b] = f_log_regression(close, len)
    int xR = bar_index
    int xL = bar_index - (len - 1)
    float yL = math.exp(b + sl * len) // left
    float yR = math.exp(b + sl * 1.0) // right(now)
    [xL, yL, xR, yR, sl]

f_center_at(idx, x1, c1, x2, c2) =>
    float t = float(idx - x1) / float(math.max(1, x2 - x1))   // 0..1
    c1 + (c2 - c1) * math.max(0.0, math.min(1.0, t))

f_level_xy(x1, c1, x2, c2, w, L) =>
    float logC1 = math.log(c1), logC2 = math.log(c2)
    float logB1 = logC1 - w,    logT1 = logC1 + w
    float logB2 = logC2 - w,    logT2 = logC2 + w
    float y1 = math.exp(logB1 + (logT1 - logB1) * L)
    float y2 = math.exp(logB2 + (logT2 - logB2) * L)
    [x1, y1, x2, y2]

f_right_y(x1, c1, x2, c2, w, L) =>
    [_, _, __, y2] = f_level_xy(x1, c1, x2, c2, w, L)
    y2

// 폭: 회귀선 대비 로그편차 평균
f_width_from_mfi_atr(x1, c1, x2, c2, look, mfi, atr, mult) =>
    int hb_mfi = ta.highestbars(mfi, look), lb_mfi = ta.lowestbars(mfi, look)
    int hb_atr = ta.highestbars(atr, look), lb_atr = ta.lowestbars(atr, look)
    int i_hm = bar_index - math.max(hb_mfi, 0)
    int i_lm = bar_index - math.max(lb_mfi, 0)
    int i_ha = bar_index - math.max(hb_atr, 0)
    int i_la = bar_index - math.max(lb_atr, 0)
    float cm_hm = f_center_at(i_hm, x1, c1, x2, c2)
    float cm_lm = f_center_at(i_lm, x1, c1, x2, c2)
    float cm_ha = f_center_at(i_ha, x1, c1, x2, c2)
    float cm_la = f_center_at(i_la, x1, c1, x2, c2)
    float d_hm = math.abs(math.log(math.max(1e-12, close[math.max(hb_mfi, 0)]) / math.max(1e-12, cm_hm)))
    float d_lm = math.abs(math.log(math.max(1e-12, close[math.max(lb_mfi, 0)]) / math.max(1e-12, cm_lm)))
    float d_ha = math.abs(math.log(math.max(1e-12, close[math.max(hb_atr, 0)]) / math.max(1e-12, cm_ha)))
    float d_la = math.abs(math.log(math.max(1e-12, close[math.max(lb_atr, 0)]) / math.max(1e-12, cm_la)))
    float baseW = na(d_hm) or na(d_lm) or na(d_ha) or na(d_la) ? 0.01 : (d_hm + d_lm + d_ha + d_la) / 4.0
    math.max(1e-4, baseW * mult)

// === Handles
var line l0 = na
var line l0236 = na
var line l0382 = na
var line l05 = na
var line l0618 = na
var line l0786 = na
var line l1 = na

var linefill lf0382 = na
var linefill lf0618 = na

var label lab0 = na
var label lab0236 = na
var label lab0382 = na
var label lab05 = na
var label lab0618 = na
var label lab0786 = na
var label lab1 = na

// ── Main
bool ready = bar_index >= regLen - 1
if ready
    // 회귀 중심선
    [x1, c1, xNow, cNow, slope] = f_reg_points(regLen)
    color dirCol = slope >= 0 ? colUp : colDn

    // 우측 끝 x (확장 제한: regLen * rightSpan/100 만큼만)
    int xRight = bar_index + int(math.round(regLen * rightSpan / 100.0))
    // xRight에서의 중심값(선형 공간)
    float cRight = f_center_at(xRight, x1, c1, xNow, cNow)

    // 폭
    mfi = ta.mfi(hlc3, mfiLen)
    atr = ta.atr(atrLen)
    int look = math.min(anchorLook, bar_index + 1)
    float w = f_width_from_mfi_atr(x1, c1, xNow, cNow, look, mfi, atr, widthMult)

    // 레벨 좌표 (좌: x1/c1, 우: xRight/cRight)
    [x10, y10, x20, y20]         = f_level_xy(x1, c1, xRight, cRight, w, 0.0)
    [x1236, y1236, x2236, y2236] = f_level_xy(x1, c1, xRight, cRight, w, 0.236)
    [x1382, y1382, x2382, y2382] = f_level_xy(x1, c1, xRight, cRight, w, 0.382)
    [x150,  y150,  x250,  y250 ] = f_level_xy(x1, c1, xRight, cRight, w, 0.5)
    [x1618, y1618, x2618, y2618] = f_level_xy(x1, c1, xRight, cRight, w, 0.618)
    [x1786, y1786, x2786, y2786] = f_level_xy(x1, c1, xRight, cRight, w, 0.786)
    [x11,   y11,   x21,   y21  ] = f_level_xy(x1, c1, xRight, cRight, w, 1.0)

    // 라인: extend.none + set_xy
    if na(l0)
        l0     := line.new(x10,  y10,  x20,  y20,  extend=extend.none, color=color.new(dirCol, 10))
        l0236  := line.new(x1236,y1236,x2236,y2236,extend=extend.none, color=color.new(dirCol, 0))
        l0382  := line.new(x1382,y1382,x2382,y2382,extend=extend.none, color=color.new(dirCol, 0))
        l05    := line.new(x150, y150, x250, y250, extend=extend.none, color=color.new(dirCol, 0), style= showMid ? line.style_solid : line.style_dotted)
        l0618  := line.new(x1618,y1618,x2618,y2618,extend=extend.none, color=color.new(dirCol, 0))
        l0786  := line.new(x1786,y1786,x2786,y2786,extend=extend.none, color=color.new(dirCol, 0))
        l1     := line.new(x11,  y11,  x21,  y21,  extend=extend.none, color=color.new(dirCol, 10))
        lf0382 := linefill.new(l0382, l05,   color=fill0382Color)
        lf0618 := linefill.new(l05,   l0618, color=fill0618Color)
    else
        line.set_xy1(l0,    x10,  y10),   line.set_xy2(l0,    x20,  y20),   line.set_color(l0,    color.new(dirCol, 10))
        line.set_xy1(l0236, x1236,y1236), line.set_xy2(l0236,x2236,y2236),  line.set_color(l0236, color.new(dirCol, 0))
        line.set_xy1(l0382, x1382,y1382), line.set_xy2(l0382,x2382,y2382),  line.set_color(l0382, color.new(dirCol, 0))
        line.set_xy1(l05,   x150, y150),  line.set_xy2(l05,   x250, y250),  line.set_color(l05,   color.new(dirCol, 0))
        line.set_xy1(l0618, x1618,y1618), line.set_xy2(l0618,x2618,y2618),  line.set_color(l0618, color.new(dirCol, 0))
        line.set_xy1(l0786, x1786,y1786), line.set_xy2(l0786,x2786,y2786),  line.set_color(l0786, color.new(dirCol, 0))
        line.set_xy1(l1,    x11,  y11),   line.set_xy2(l1,    x21,  y21),   line.set_color(l1,    color.new(dirCol, 10))

    // 라벨: 좌측 방향, 투명 배경, 우측 끝에서 왼쪽으로 labelPadBars만큼
    int xLbl = xRight - labelPadBars
    color labBg = color.new(color.black, 100)  // 완전 투명
    if na(lab0)
        lab0    := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.0),   "0%",    style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab0236 := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.236), "23.6%", style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab0382 := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.382), "38.2%", style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab05   := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.5),   "50%",   style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab0618 := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.618), "61.8%", style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab0786 := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 0.786), "78.6%", style=label.style_label_left,  textcolor=color.white, color=labBg)
        lab1    := label.new(xLbl, f_right_y(x1, c1, xRight, cRight, w, 1.0),   "100%",  style=label.style_label_left,  textcolor=color.white, color=labBg)
    else
        label.set_x(lab0,    xLbl), label.set_y(lab0,    f_right_y(x1, c1, xRight, cRight, w, 0.0))
        label.set_x(lab0236, xLbl), label.set_y(lab0236, f_right_y(x1, c1, xRight, cRight, w, 0.236))
        label.set_x(lab0382, xLbl), label.set_y(lab0382, f_right_y(x1, c1, xRight, cRight, w, 0.382))
        label.set_x(lab05,   xLbl), label.set_y(lab05,   f_right_y(x1, c1, xRight, cRight, w, 0.5))
        label.set_x(lab0618, xLbl), label.set_y(lab0618, f_right_y(x1, c1, xRight, cRight, w, 0.618))
        label.set_x(lab0786, xLbl), label.set_y(lab0786, f_right_y(x1, c1, xRight, cRight, w, 0.786))
        label.set_x(lab1,    xLbl), label.set_y(lab1,    f_right_y(x1, c1, xRight, cRight, w, 1.0))

// 라인 핸들 getter (옵션)
f_get_fib_line_for(level) =>
    line out = na
    if   level == 0.382
        out := l0382
    else if level == 0.5
        out := l05
    else if level == 0.618
        out := l0618
    out
